#target tap

headerflag:     equ 0
dataflag:       equ 0xff
tCLEAR          equ $FD             ; token CLEAR
tLOAD           equ $EF             ; token LOAD
tCODE           equ $AF             ; token CODE
tPRINT          equ $F5             ; token PRINT
tRANDOMIZE      equ $F9             ; token RANDOMIZE
tUSR            equ $C0             ; token USR

pixels_start    equ 0x4000      ; ZXSP screen pixels
attr_start      equ 0x5800      ; ZXSP screen attributes
printer_buffer  equ 0x5B00      ; ZXSP printer buffer
code_start      equ 24000

#data VARIABLES, printer_buffer, 0x100

#code PROG_HEADER,0,17,headerflag
        defb    0                       ; Indicates a Basic program
        defb    "mloader   "            ; the block name, 10 bytes long
        defw    variables_end-0         ; length of block = length of basic program plus variables
        defw    10                      ; line number for auto-start, 0x8000 if none
        defw    program_end-0           ; length of the basic program without variables
#code PROG_DATA,0,*,dataflag
        defb    0,10                    ; line number
        defb    end10-($+1)             ; line length
        defb    0                       ; statement number
        defb    tCLEAR                  ; token CLEAR
        defm    "23999",$0e0000bf5d00   ; number 23999, ascii & internal format
end10:  defb    $0d                     ; line end marker
        defb    0,20                    ; line number
        defb    end20-($+1)             ; line length
        defb    0                       ; statement number
        defb    tLOAD,'"','"',tCODE     ; token LOAD, 2 quotes, token CODE
        defm    "24000",$0e0000c05d00   ; number 24000, ascii & internal format
end20:  defb    $0d                     ; line end marker
        defb    0,30                    ; line number
        defb    end30-($+1)             ; line length
        defb    0                       ; statement number
        defb    tRANDOMIZE,tUSR         ; token RANDOMIZE, token USR
        defm    "24000",$0e0000c05d00   ; number 24000, ascii & internal format
end30:  defb    $0d                     ; line end marker
program_end:
variables_end:

#code CODE_HEADER,0,17,headerflag
        defb    3                       ; Indicates binary data
        defb    "mcode     "            ; the block name, 10 bytes long
        defw    code_end-code_start     ; length of data block which follows
        defw    code_start              ; default location for the data
        defw    0                       ; unused
#code CODE_DATA,code_start,*,dataflag


; ----------------- ZX program starts here -----------------

        call CLS

        ld hl,16384
        ld (PRINTPOS),hl
        ld a,32
MAIN:   push af
        call PRINTC
        pop af        
        inc a
        cp 128
        jr nz, MAIN
        ret

PRINTC: push af                 ;get address of char in charmap
        sub 32                  
        ld h,0
        ld l,a
        add hl,hl
        add hl,hl
        add hl,hl
        ld de,CMAP
        add hl,de               ;now, hl contains start of character def
        ld b,8                  ;each char has 8 lines
        ld de,(PRINTPOS)        ;printpos into de
        push de
PRC1:   ld a,(hl)               ;print character
        ;rrca                   ;make bold
        ;or (hl)
        
        ld (de),a        
        inc d
        inc hl
        djnz PRC1     
        pop de                  ;set new printpos
        inc e
        jr nz, S_POS
        ld a,d
        add a,8
        ld d,a
        cp 88
        jr c, S_POS
        ld d,64
S_POS:  ld (PRINTPOS),de
        pop af
        ret

CMAP:    equ 15616
PRINTPOS: defw 0 ;sem je ukládána tisková pozic


#include "subroutines/libtext.a80"


; ------------------ZX program ends here -------------------
code_end:
